name: ci-cd

on:
  push:
    branches:
      - dev
      - prod
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      PROFILE_NAME: ${{ github.ref_name }}
      ECR_ARN: ${{ secrets.AWS_ROLE_NAME }}
      ECR_REPOSITORY: photospot
      IMAGE_TAG: ${{ github.sha }}
      REGION: ap-northeast-2

    # 테스트용 Docker MySQL
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: photospot
          MYSQL_ROOT_PASSWORD: 1234
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        run: ./gradlew clean build

      # OIDC(IAM Role)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ECR_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image, Push to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$PROFILE_NAME-$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$PROFILE_NAME-$IMAGE_TAG

      - name: Create ApplicationStart script
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          touch start.sh
          echo "cd /home/ubuntu/app" >> start.sh
          echo "aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY" >> start.sh
          echo "docker pull $REGISTRY/$ECR_REPOSITORY:$PROFILE_NAME-$IMAGE_TAG" >> start.sh 
          echo "docker-compose up -d" >> start.sh
          mv start.sh scripts/start.sh
          touch .env
          echo "PHOTOSPOT_IMAGE=$REGISTRY/$ECR_REPOSITORY:$PROFILE_NAME-$IMAGE_TAG" >> .env
          echo "PROFILE=$PROFILE_NAME" >> .env

      - name: Upload to S3
        run: |
          zip -r $PROFILE_NAME-$IMAGE_TAG.zip ./scripts docker-compose.yml appspec.yml .env
          aws s3 cp --region $REGION --acl private ./$PROFILE_NAME-$IMAGE_TAG.zip s3://photospot-bucket/deploy/

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
          --application-name photospot-deploy \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name codedeploy-group \
          --ignore-application-stop-failures \
          --s3-location bucket=photospot-bucket,bundleType=zip,key=deploy/$PROFILE_NAME-$IMAGE_TAG.zip
