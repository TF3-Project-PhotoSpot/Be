name: ci_cd_prod

on:
  push:
    branches:
      - prod
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      PROFILE_NAME: prod
      ROLE_ARN: ${{ secrets.AWS_PROD_ROLE_ARN }}
      ECR_REPOSITORY: plop
      IMAGE_TAG: ${{ github.sha }}
      REGION: ap-northeast-2

    # 테스트용 Docker MySQL, Redis
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: photospot
          MYSQL_ROOT_PASSWORD: 1234
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze
        run: ./gradlew clean build

      # IAM Role에 OIDC(OAuth 2.0 인증 프로토콜의 확장) 자격 증명을 이용
      # IAM User의 Access Key, Secret Access Key를 직접적으로 이용하는 방식보다 보안적으로 권징
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }} # IAM Role의 ARN(리소스 이름, 식별자)
          aws-region: ${{ env.REGION }}

      # ECR에 로그인, ECR은 AWS에서 제공하는 관리형 컨테이너 이미지 레지스트리 서비스
      # AWS IAM을 사용하여 리소스 기반 권한을 가진 프라이빗 리포지토리를 지원, 컨테이너 이미지를 S3에 저장
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image, Push to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create ApplicationStart script
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          touch start.sh
          echo "cd /home/ubuntu/app" >> start.sh
          echo "aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY" >> start.sh
          echo "docker pull $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> start.sh 
          echo "docker run -p 8080:8080 -e "SPRING_PROFILES_ACTIVE=prod" -d --restart always --name plop-app $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> start.sh
          mv start.sh scripts/start.sh

      - name: Upload to S3
        run: |
          zip $PROFILE_NAME-$IMAGE_TAG.zip ./scripts/start.sh ./appspec-prod/appspec.yml
          aws s3 cp --region $REGION --acl private ./$PROFILE_NAME-$IMAGE_TAG.zip s3://plop-s3/deploy/

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
          --application-name plop-codedeploy \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name plop-codedeploy-group \
          --ignore-application-stop-failures \
          --s3-location bucket=plop-s3,bundleType=zip,key=deploy/$PROFILE_NAME-$IMAGE_TAG.zip
